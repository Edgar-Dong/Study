plugins {
    id 'com.android.library'
}

//将annotations模块中lint.jar文件拷贝到各个工程的build/intermediates/lint/文件夹下
task copyLintJar(type: Copy) {
    String lintPath = rootProject.rootDir.absolutePath + '/lint.jar'
    File file = new File(lintPath)
    if (file.exists()) {
        from lintPath
        into 'build/intermediates/lint/'
    } else {
        String path = file.getAbsolutePath()
        project.logger.warn "${path}不存在"
    }
}

project.afterEvaluate {
    project.tasks.all {
        String name = it.name;
        if (name == 'preDebugBuild'
                || name == 'preReleaseBuild'
                //应对不同的product flavor
                || (name.startsWith('pre') && ((name.endsWith('DebugBuild') || name.endsWith('ReleaseBuild'))))) {
            it.dependsOn(copyLintJar)
        }
    }
}

def config = rootProject.ext.android

android {
    compileSdkVersion config.compileSdkVersion
    buildToolsVersion config.buildToolsVersion

    defaultConfig {
        minSdkVersion config.minSdkVersion
        targetSdkVersion config.targetSdkVersion
        versionCode config.versionCode
        versionName config.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

def library = rootProject.ext.dependencies

configurations {
    lintLibrary
}

dependencies {

    implementation library.appcompat
    implementation library.material
    testImplementation library.junit
    androidTestImplementation library.ext_junit
    androidTestImplementation library.espresso_core

    lintLibrary project(path: ":lintjar", configuration: "lintChecks")
}